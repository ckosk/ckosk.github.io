<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs title="Clover Menu" description="A menu gadget for displaying information from a Clover POS machine" author="" background="transparent">
        <UserPref name="myMerchPref" display_name="Merchant ID*" datatype="string" default_value="" required="true" />
        <UserPref name="myItemPref" display_name="Item ID" datatype="string" default_value="" required="false" />
        <UserPref name="myCatPref" display_name="Category ID*" datatype="string" default_value="" required="false" />
        <UserPref name="myAPIPref" display_name="API Token*" datatype="string" default_value="" required="true" />

        <UserPref name="tableSpacingTop" display_name="Top-Bottom Table Spacing" datatype="string" default_value="8" required="true" />
        <UserPref name="tableSpacingSide" display_name="Left-Right Table Spacing" datatype="string" default_value="30" required="true" />
        <UserPref name="tableFontSize" display_name="Table Text Size" datatype="string" default_value="1.17" required="true" />
        <UserPref name="stockFontSize" display_name="Special Text Size" datatype="string" default_value="1.17" required="true" />
        <UserPref name="updateInterval" display_name="Update Interval (in minutes)" datatype="string" default_value="5" required="true" />
        <UserPref name="myBackColorPref" display_name="Background Color" datatype="color" default_value="#B6D0E2" />
        <UserPref name="myHeadColorPref" display_name="Header Color" datatype="color" default_value="#1ABC9C" />
        <UserPref name="myHeadTextColorPref" display_name="Header Text Color" datatype="color" default_value="#FFFFFF" />
        <UserPref name="myBackTextColorPref" display_name="Body Text Color" datatype="color" default_value="#000000" />
        <UserPref name="myBorderColorPref" display_name="Item List Border Color" datatype="color" default_value="#000000" />
        <UserPref name="myTitlePref" display_name="Menu Title" datatype="string" default_value="Default Menu Title" required="true" />

        <UserPref name="myBoolHeadPref" display_name="Display Header" datatype="bool" default_value="true" />
        <UserPref name="myBoolStockPref" display_name="Display Stock Count" datatype="bool" default_value="false" />
        <UserPref name="myBoolRemovePref" display_name="Remove Out-of-Stock" datatype="bool" default_value="true" />
        <UserPref name="myBoolCorsPref" display_name="Enable Proxy" datatype="bool" default_value="true" />

        <UserPref name="ForeColor" datatype="hidden" />
        <UserPref name="BackColor" datatype="hidden" />
        <UserPref name="rdW" display_name="Width" required="true" default_value="280" datatype="hidden" />
        <UserPref name="rdH" display_name="Height" required="true" default_value="190" datatype="hidden" />
        <UserPref name="rdKey" display_name="Device Registration Key" default_value="*|DEVICE.REGISTRATIONKEY|*" datatype="hidden" />
    </ModulePrefs>
    <Content type="html"><![CDATA[<style type="text/css">

    body *
    {
        line-height: 1.2em; 
        letter-spacing: 0; 
        word-spacing: normal;
    }

    body {
        background-color: __UP_myBackColorPref__;
    }

    .header {
        padding: 30px;
        text-align: center;
        background: __UP_myHeadColorPref__;
        color: __UP_myHeadTextColorPref__;
        font-size: 20px;
    }

    #priceStock {
        font-size: 25px;
        text-align: center;
        color: __UP_myBackTextColorPref__;
        font-size: __UP_stockFontSize__em;
    }

    #itemList {
        font-size: 25px;
        text-align: center;
        color: __UP_myBackTextColorPref__;
    }

    .centerTable {
        margin-left: auto;
        margin-right: auto;
        padding-bottom: 1rem;
        font-size: __UP_tableFontSize__em;
    }

    th,
    td {
        padding-bottom: __UP_tableSpacingTop__px;
        padding-top: __UP_tableSpacingTop__px;
        padding-left: __UP_tableSpacingSide__px;
        padding-right: __UP_tableSpacingSide__px;
        border-bottom: 1pt solid __UP_myBorderColorPref__;
    }

    .my-style
    {
        __UP_myStylePref__;
    }

</style>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<body>
    <div class="header" id="headerID">
        <h1>__UP_myTitlePref__</h1>
    </div>
    <div id="itemList">
        <div>
            <table id="itemListList" class="centerTable">
            </table>
        </div>
    </div>
</body>

<script type="text/javascript">

    var prefs = new gadgets.Prefs();

    let merchID = "__UP_myMerchPref__";
    let stockBool = __UP_myBoolStockPref__;
    let removeBool = __UP_myBoolRemovePref__;
    let itemID = "__UP_myItemPref__";
    let myCatID = "__UP_myCatPref__";
    let myAPIToken = "__UP_myAPIPref__";
    let myUpdateInterval = (__UP_updateInterval__ * 60000);
    
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    var formatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
    });
    
    const options = {
        method: 'GET',
        headers: { Authorization: 'Bearer ' + myAPIToken }
    };

    if (__UP_myBoolCorsPref__ === false) {
        cors = '';
    }
    if (__UP_myBoolHeadPref__ === false) {
        const element = document.getElementById('headerID');
        element.remove();
    }

    let catURL = ('https://sandbox.dev.clover.com/v3/merchants/' + merchID + '/categories/' + myCatID + '/items');
    let itemURL = ('https://sandbox.dev.clover.com/v3/merchants/' + merchID + '/items');
    let catURLP = gadgets.io.getProxyUrl(catURL);
    let itemURLP = gadgets.io.getProxyUrl(itemURL);
    let gStatus;

    if (itemID != "" && merchID != "") {
        if (stockBool) { 
            axios.get(itemURLP, options)
                .then(response => {
                    gStatus = (response.status);
                    console.log(gStatus);})
                .then((response) => {
                    for (let i = 0; i < response.elements.length; i++) {
                        if (response.elements[i].id == itemID) {
                            (document.getElementById("itemListList").innerHTML = "<tr><td>" + response.elements[i].name + "</td><td>"
                            + formatter.format((response.elements[i].price) / 100) + "</td><td>" 
                            + response.elements[i].stockCount + "</td></tr>");}}
                        })
                .catch(err => console.error(err));
        }
        else {
            axios.get(itemURLP, options)
                .then(response => {
                    gStatus = (response.status);
                    console.log(gStatus);})
                .then((response) => {
                    for (let i = 0; i < response.elements.length; i++) {
                        if (response.elements[i].id == itemID) {
                            (document.getElementById("itemListList").innerHTML = "<tr><td>" + response.elements[i].name + "</td><td>"
                            + formatter.format((response.elements[i].price) / 100) + "</td></tr>");}}
                        })
                .catch(err => console.error(err));
        }

    }
    if (myCatID != "" && merchID != "") {
        if (stockBool) { 
            axios.get(catURLP, options)
                .then(response => {
                    gStatus = (response.status);
                    console.log(gStatus);})
                .then((response) => {
                    for (let i = 0; i < response.elements.length; i++) {
                        (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.elements[i].name + "</td><td>"
                            + formatter.format((response.elements[i].price) / 100) + "</td><td>" 
                            + response.elements[i].stockCount + "</td></tr>");}})
                .catch(err => console.error(err));
        }
        else {
            axios.get(catURLP, options)
                .then(response => {
                    gStatus = (response.status);
                    console.log(gStatus);})
                .then((response) => {
                    for (let i = 0; i < response.elements.length; i++) {
                        (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.elements[i].name + "</td><td>"
                            + formatter.format((response.elements[i].price) / 100) + "</td></tr>");}})
                .catch(err => console.error(err));
        }
    }

    if (merchID == "") {
        document.getElementById("itemListList").innerHTML = "Enter Merchant ID";
    }
    if (itemID == "" && myCatID == "") {
        document.getElementById("itemListList").innerHTML = "Enter Category ID or Item ID";
    }
        
    function getInv() {
        if (itemID != "" && merchID != "") {
            axios.get(itemURLP, options)
                .then(response => {
                    gStatus = (response.status);
                    console.log(gStatus);})
                .then((response) => {
                    for (let i = 0; i < response.elements.length; i++) {
                        if (response.elements[i].id == itemID) {
                            (document.getElementById("itemListList").innerHTML = "<tr><td>" + response.elements[i].name + "</td><td>"
                            + formatter.format((response.elements[i].price) / 100) + "</td><td>" 
                            + response.elements[i].stockCount + "</td></tr>");}}
                        })
                .catch(err => console.error(err));
        }
        else if (myCatID != "" && merchID != "") {
            document.getElementById("itemListList").innerHTML = "";
            axios.get(catURLP, options)
                .then(response => {
                    gStatus = (response.status);
                    console.log(gStatus);})
                .then((response) => {
                    for (let i = 0; i < response.elements.length; i++) {
                        (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.elements[i].name + "</td><td>"
                            + formatter.format((response.elements[i].price) / 100) + "</td><td>" 
                            + response.elements[i].stockCount + "</td></tr>");}})
                .catch(err => console.error(err));
        }
        else {
            document.getElementById("itemListList").innerHTML = "Enter Correct Credentials";
        }
    }

    async function removeMinStock() {
        if (gStatus == 200) {
            var numRows = document.getElementById("itemListList").rows.length;
            const rows = Array.from(document.getElementsByTagName('td'));
            if (numRows > 0) {
                let countRow = 0;
                for (i = 0; i <= numRows; i++) {
                    try {
                        rows.forEach(rowItem => {
                            if (rowItem.innerHTML == 0) {
                                rowItem.closest('tr').remove();
                                countRow++;
                            }
                        })
                    }
                    catch(err) {
                        console.error(err);
                    }
                }
                console.log(countRow + " items removed due to low quantity.");
            }
            else {
                console.log("Table not full. Trying again shortly.");
                await sleep(500);
                removeMinStock();
            }
            console.log(numRows + " rows searched for removal.");
        }
        else {
            console.log("Did not search rows. Status: " + String(gStatus));
        }
    }
    if (removeBool) {
        removeMinStock();}

    if (stockBool) { 
        setInterval(function () {
            getInv();
            if (removeBool) {
                removeMinStock();}
            console.log("Item count has been automatically updated");
        }, myUpdateInterval);
    }
    

</script>]]></Content>
</Module>